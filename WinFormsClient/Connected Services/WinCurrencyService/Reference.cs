//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WinFormsClient.WinCurrencyService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InvalidCurrencyFault", Namespace="http://schemas.datacontract.org/2004/07/CurrencyUpdater")]
    [System.SerializableAttribute()]
    public partial class InvalidCurrencyFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomErrorField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomError {
            get {
                return this.CustomErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomErrorField, value) != true)) {
                    this.CustomErrorField = value;
                    this.RaisePropertyChanged("CustomError");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InvalidServerFault", Namespace="http://schemas.datacontract.org/2004/07/CurrencyUpdater")]
    [System.SerializableAttribute()]
    public partial class InvalidServerFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomErrorField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomError {
            get {
                return this.CustomErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomErrorField, value) != true)) {
                    this.CustomErrorField = value;
                    this.RaisePropertyChanged("CustomError");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InvalidDateFault", Namespace="http://schemas.datacontract.org/2004/07/CurrencyUpdater")]
    [System.SerializableAttribute()]
    public partial class InvalidDateFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomErrorField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomError {
            get {
                return this.CustomErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomErrorField, value) != true)) {
                    this.CustomErrorField = value;
                    this.RaisePropertyChanged("CustomError");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WinCurrencyService.ICurrencyUpdate")]
    public interface ICurrencyUpdate {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyUpdate/GetCurrency", ReplyAction="http://tempuri.org/ICurrencyUpdate/GetCurrencyResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WinFormsClient.WinCurrencyService.InvalidCurrencyFault), Action="http://tempuri.org/ICurrencyUpdate/GetCurrencyInvalidCurrencyFaultFault", Name="InvalidCurrencyFault", Namespace="http://schemas.datacontract.org/2004/07/CurrencyUpdater")]
        [System.ServiceModel.FaultContractAttribute(typeof(WinFormsClient.WinCurrencyService.InvalidServerFault), Action="http://tempuri.org/ICurrencyUpdate/GetCurrencyInvalidServerFaultFault", Name="InvalidServerFault", Namespace="http://schemas.datacontract.org/2004/07/CurrencyUpdater")]
        double GetCurrency(string charCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyUpdate/GetCurrency", ReplyAction="http://tempuri.org/ICurrencyUpdate/GetCurrencyResponse")]
        System.Threading.Tasks.Task<double> GetCurrencyAsync(string charCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyUpdate/GetCurrencyForDay", ReplyAction="http://tempuri.org/ICurrencyUpdate/GetCurrencyForDayResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WinFormsClient.WinCurrencyService.InvalidDateFault), Action="http://tempuri.org/ICurrencyUpdate/GetCurrencyForDayInvalidDateFaultFault", Name="InvalidDateFault", Namespace="http://schemas.datacontract.org/2004/07/CurrencyUpdater")]
        [System.ServiceModel.FaultContractAttribute(typeof(WinFormsClient.WinCurrencyService.InvalidServerFault), Action="http://tempuri.org/ICurrencyUpdate/GetCurrencyForDayInvalidServerFaultFault", Name="InvalidServerFault", Namespace="http://schemas.datacontract.org/2004/07/CurrencyUpdater")]
        CurrencyUpdater.ValCurs GetCurrencyForDay(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyUpdate/GetCurrencyForDay", ReplyAction="http://tempuri.org/ICurrencyUpdate/GetCurrencyForDayResponse")]
        System.Threading.Tasks.Task<CurrencyUpdater.ValCurs> GetCurrencyForDayAsync(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyUpdate/GetCurrencyForDayCharCode", ReplyAction="http://tempuri.org/ICurrencyUpdate/GetCurrencyForDayCharCodeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WinFormsClient.WinCurrencyService.InvalidCurrencyFault), Action="http://tempuri.org/ICurrencyUpdate/GetCurrencyForDayCharCodeInvalidCurrencyFaultF" +
            "ault", Name="InvalidCurrencyFault", Namespace="http://schemas.datacontract.org/2004/07/CurrencyUpdater")]
        [System.ServiceModel.FaultContractAttribute(typeof(WinFormsClient.WinCurrencyService.InvalidDateFault), Action="http://tempuri.org/ICurrencyUpdate/GetCurrencyForDayCharCodeInvalidDateFaultFault" +
            "", Name="InvalidDateFault", Namespace="http://schemas.datacontract.org/2004/07/CurrencyUpdater")]
        [System.ServiceModel.FaultContractAttribute(typeof(WinFormsClient.WinCurrencyService.InvalidServerFault), Action="http://tempuri.org/ICurrencyUpdate/GetCurrencyForDayCharCodeInvalidServerFaultFau" +
            "lt", Name="InvalidServerFault", Namespace="http://schemas.datacontract.org/2004/07/CurrencyUpdater")]
        double GetCurrencyForDayCharCode(System.DateTime date, string charCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyUpdate/GetCurrencyForDayCharCode", ReplyAction="http://tempuri.org/ICurrencyUpdate/GetCurrencyForDayCharCodeResponse")]
        System.Threading.Tasks.Task<double> GetCurrencyForDayCharCodeAsync(System.DateTime date, string charCode);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICurrencyUpdateChannel : WinFormsClient.WinCurrencyService.ICurrencyUpdate, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CurrencyUpdateClient : System.ServiceModel.ClientBase<WinFormsClient.WinCurrencyService.ICurrencyUpdate>, WinFormsClient.WinCurrencyService.ICurrencyUpdate {
        
        public CurrencyUpdateClient() {
        }
        
        public CurrencyUpdateClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CurrencyUpdateClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CurrencyUpdateClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CurrencyUpdateClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double GetCurrency(string charCode) {
            return base.Channel.GetCurrency(charCode);
        }
        
        public System.Threading.Tasks.Task<double> GetCurrencyAsync(string charCode) {
            return base.Channel.GetCurrencyAsync(charCode);
        }
        
        public CurrencyUpdater.ValCurs GetCurrencyForDay(System.DateTime date) {
            return base.Channel.GetCurrencyForDay(date);
        }
        
        public System.Threading.Tasks.Task<CurrencyUpdater.ValCurs> GetCurrencyForDayAsync(System.DateTime date) {
            return base.Channel.GetCurrencyForDayAsync(date);
        }
        
        public double GetCurrencyForDayCharCode(System.DateTime date, string charCode) {
            return base.Channel.GetCurrencyForDayCharCode(date, charCode);
        }
        
        public System.Threading.Tasks.Task<double> GetCurrencyForDayCharCodeAsync(System.DateTime date, string charCode) {
            return base.Channel.GetCurrencyForDayCharCodeAsync(date, charCode);
        }
    }
}
